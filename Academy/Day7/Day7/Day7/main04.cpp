#include <iostream>

using namespace std;

void main()
{
	// 포인터
	// 상당히 어려움.

	// 포인터란 무엇인가?
	// 컴퓨터 사이언스를 조금 백그라운드를 알아야
	// 이해가 쉽다.

	// 이해를 못하겠다
	// 포인터 잘 쓴 코드들을 외우면 됨.

	// 포인터 - 1
	// 포인터는 : 변수의 메모리 주소

	// 자료형에 대해서 조금 깊게 배웠음.
	// 똑같은 정수형이라도 1,2,3,4,8 바이트 정수가 따로있었음.
	// 이 변수들이 저장되는 곳은
	// RAM이라고 하는 공간에 변수가 저장됨.
	// 언제까지? 변수가 사라질때까지.

	// 변수가 어떻게 저장될까

	int a = 3;
	// a의 주소는 H3에 저장되어 있고
	// 값은 3으로 4바이트영역에 걸쳐 저장되었다.

	// a의 주소값은 : H3
	// a의 값은 : 3
	// a의 주소값에 위치한 값은? : 3

	// 이론은 다배웠음

	cout << "a의 주소값 : " << &a << endl;
	// & 연산자 : 주소값을 가져온다.
	cout << "a의 값 : " << a << endl;
	// a의 주소값에 위치한 값
	cout << "a의 주소값에 위치한 값 : " << (*(&a)) << endl;

	// & 연산자 : 주소값을 가져온다.
	// * 연산자 : 뒤에 온 값을 주소값으로 인지했을때의 실제 값

	// 포인터
	// 포인터 자료형
	// 포인터 자료형은 주소를 들고있는 자료형임.
	// 포인터 자료형에 넣을 수 있는 값은 메모리 주소
	// 포인터 자료형 b = nullptr;
	// b = &a;
	// b에는 a의 주소값을 기억하겠다.
	// b의 값은 : a의 주소값
	// b의 주소값 : D9
	// *b : 3(a의 값)
	
	// 포인터자료형이 어떻게 생겼나
	int* ptr = nullptr;
	// int*이 포인터임.

	// int* ptr << 이거는 int형 변수의 주소만 기억할 수 있음.
	float f = 10.4;
	ptr = &a;

	// ptr의 값은 : H3(a의 주소값)
	// b의 주소값 : D9
	// *ptr : 3(a의 값)

	cout << "ptr의 값은 : " << ptr << endl;
	cout << "ptr의 주소값 : " << &ptr << endl;
	cout << "ptr의 *값 : " << *ptr << endl;

	// 포인터 오늘 내용 마지막.
	// 이거까지 배워도
	// 포인터를 어따쓰는지 1도 알수없음.

	// 포인터와 배열은 비슷하다. (아주 많이)

	int arr[3] = {};

	cout << "arr의 값 : " << arr << endl;
	// arr이라는 애는 배열의 가장 첫번째에 위치한 주소값을 들고있는거임.
	// 그리고 우리가 [0], [1]을 통해서 그 위치의 값을 들고오는 거임.

	int* ptr2 = arr;
	cout << "ptr2의 값 : " << ptr2 << endl;
	cout << "*ptr2 : " << *ptr2 << endl;
	cout << "*(ptr2 + 1)" << *(ptr2 + 1) << endl;
	cout << "*(ptr2 + 2)" << *(ptr2 + 2) << endl;

}